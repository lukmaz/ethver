user "A";
user "B";

CONTRACT_BALANCE_MAX = 3;
CONTRACT_BALANCE_INIT = 0;
USER_BALANCE_MAX = 3;
USER0_BALANCE_INIT = 1;
USER1_BALANCE_INIT = 2;
MAX_VALUE = 1;
MAX_TIME = 2;
MAX_COMMITMENTS = 2;
TIME_DELTA = 3600;

contract RPS {
  uint(3) num_players;
  address player_address[2];
  uint(3) player_choice[2];
  uint(3) p0; // player who first joined the game
  uint(3) p1;
  uint(3) reward;
  uint(2) player_num;
  hash commitment[2];

  bool committed[2]; // 0 - player who first joined the game
  bool has_revealed[2]; // - || -

  function_with_value player_input(hash h) {
    if (num_players >= 2 || msg.value != finney(1) || time_elapsed > 0) {
      msg.sender.send(msg.value);
    }
    else if (num_players < 2 && msg.value == finney(1) && time_elapsed == 0) {
      reward = reward + msg.value;
      player_address[num_players] = msg.sender;
      commitment[num_players] = h;
      committed[num_players] = true;
      num_players = num_players + 1;
    }
  }

  function open(cmt_uint(3) cmt) {
    if (msg.sender == player_address[0]) {
      player_num = 0;
    }
    else if (msg.sender == player_address[1]) {
      player_num = 1;
    }
    if (committed[player_num] && !has_revealed[player_num] && verCommitment(cmt, commitment[player_num])) {
      has_revealed[player_num] = true;
      player_choice[player_num] = valueOf(cmt);
    }
  }

	function finalize() {
    if (time_elapsed > 0 && committed[0] && !committed[1]) {
      player_address[0].send(1);
    }
    else if (time_elapsed > 0 && !committed[0] && committed[1]) {
      player_address[1].send(1);
    }
    else if (has_revealed[0] && has_revealed[1]) {
      p0 = player_choice[0];
      p1 = player_choice[1];
      if ((((3 + p0) - p1) % 3) == 1) {
        player_address[0].send(reward);
      }
      if ((((3 + p0) - p1) % 3) == 2) {
        player_address[1].send(reward);
      }
      if ((((3 + p0) - p1) % 3) == 0) {
        player_address[0].send(reward/2);
        player_address[1].send(reward/2);
      }
    }
  }
}

communication {

}

scenario A {
  bool endA;
  cmt_uint(3) cmtA;
  cmtA.randomCommitment();

  player_input.sendTransaction(hashOf(cmtA), {from: "A", value: 1});
  wait(num_players == 2, 1);
  if (num_players == 2) {
    cmtA.openCommitment();
    open.sendTransaction(cmtA, {from: "A", value: 0});
    wait(has_revealed[0] && has_revealed[1], 2);
  }
  finalize.sendTransaction({from: "A", value: 0});
  endA = true;
}

scenario B {
  bool endB;
  cmt_uint(3) cmtB;
  cmtB.randomCommitment();

  player_input.sendTransaction(hashOf(cmtB), {from: "B", value: 1});
  wait(num_players == 2, 1);
  if (num_players == 2) {
    cmtB.openCommitment();
    open.sendTransaction(cmtB, {from: "B", value: 0});
    wait(has_revealed[0] && has_revealed[1], 2);
  }
  finalize.sendTransaction({from: "B", value: 0});
  endB = true;
}
