// P1: ADV = -1
// P2: ADV = -1
// P3: ADV = 1
// P4: ADV = 0

user "U";
user "M";

CONTRACT_BALANCE_MAX = 3;
CONTRACT_BALANCE_INIT = 3;
USER_BALANCE_MAX = 3;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 1;
MAX_TIME = 2;
MAX_SIGNATURES = 3;
MAX_COMMITMENTS = 2;

// c1, r1 - values in honest mode, recipient = 1
// c0, r0 - values in adversarial mode, recipient = 0
// rM - values from Merchant role of the protocol
// rU - values from User role of the protocol

contract Micropay {
  uint(3) winning_tickets;
  uint(2) pot = 1;
  uint(3) deposit = 2;

  function release(cmt_uint(2) rel_c, uint(2) rel_rU) {
    // adversary case:
    /*
    if (msg.sender == 0 && randU[0] == commitmentM[0]) {
      if (winning_tickets < 2) {
        winning_tickets = winning_tickets + 1;
      }
      if (pot > 0 && ver(0, sigma[0], (commitmentM[0], randU[0], receiver[0]))) {
        receiver[0].send(1);
        pot = pot - 1;
      }
    }
    */


    // honest case:
    if (msg.sender == 1 && rel_rU == rel_c) { // czy tu nie trzeba już dochodzić wartości po id?
      if (winning_tickets < 2) {
        winning_tickets = winning_tickets + 1;
      }
      if (pot > 0 && ver(0, sigma[msg.sender], (rel_c, rel_rU, msg.sender))) {
        msg.sender.send(1);
        pot = pot - 1;
      }
    } 

  }

  function burn() {
    if ((winning_tickets >= 2) && (deposit >= 2)) {
      "null".send(2);
      deposit = deposit - 2;
    }
  }

  function release_deposit() {
    if (time_elapsed >= 2) {
      0.send(2);
      deposit = deposit - 2;
    }
  }
}    

communication {
  cmt_uint(2) commitmentM[2];
  bool has_revealedM[2]; // to też
  bool is_signedU; // wyluskac z podpisu
  uint(2) randU;
  signature(cmt_uint(2), uint(2), uint(2)) sigma[2];

  function copy_signature() {
    if (msg.sender == 0) {
      sigma_0_sig_key = sigma_1_sig_key;
      sigma_0_sig0 = sigma_1_sig0;
      sigma_0_sig1 = sigma_1_sig1;
      sigma_0_sig2 = sigma_1_sig2;
    }
    else {
      sigma_1_sig_key = sigma_0_sig_key;
      sigma_1_sig0 = sigma_0_sig0;
      sigma_1_sig1 = sigma_0_sig1;
      sigma_1_sig2 = sigma_0_sig2;
    }
  }

  function payment_request() {
    commitmentM[msg.sender].randomCommitment();
  }

  function payment_issuance(cmt_uint(2) pay_c, uint(2) pay_r, uint(2) pay_a) {
    randU = pay_r;
    is_signedU = true;
    sigma[msg.sender] = sign(pay_c, pay_r, pay_a);
  }

  function open() {
    //if (msg.sender == 1 && !has_revealedM) {
    commitmentM[msg.sender].openCommitment();
    has_revealedM[msg.sender] = true;
    //}
  }
}

scenario U {
  uint(2) rand0;
  bool endU;

  wait(commitmentM[1] < 3, 1);
  if (commitmentM[1] < 3) {
    rand0 = random(2);
    payment_issuance.sendCommunication(commitmentM[1], rand0, 1);
  }
  wait(false, 2);
  release_deposit.sendTransaction({from: "U", value: 0});

  endU = true;
}

scenario M {
  bool endM;

  payment_request.sendCommunication();
  wait(is_signedU, 1);
  if (is_signedU && time_elapsed < 1) {
    copy_signature.sendCommunication();
    open.sendCommunication();
    if (commitmentM[1] == randU) { // moze niepotrzebne? Moze nie trzeba trzymac randU w globalu?
      release.sendTransaction(commitmentM[1], randU, {from: "M", value: 0});
      wait(balance1 >= 1, 1);
      if ((balance1 < 1) && (winning_tickets >= 2)) {
        burn.sendTransaction({from: "M", value: 0});
      }
    }
  }
  endM = true;
}
