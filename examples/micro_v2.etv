// P1: ADV = -1
// P2: ADV = -1
// P3: ADV = 1
// P4: ADV = 0

user "U";
user "M";

CONTRACT_BALANCE_MAX = 3;
CONTRACT_BALANCE_INIT = 3;
USER_BALANCE_MAX = 3;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 1;
MAX_TIME = 2;

contract Micropay {
  uint(2) pot = 1;
  uint(2) r1_loc;
  uint(3) winning_tickets = 0;
  uint(3) deposit = 2;

  function_limit 2 release(cmt_uint(2) rel_c_cmt, uint(2) rel_r2, hash rel_c_hash, signature(cmt_uint(2), uint(2), uint(2)) rel_sigma) {
    r1_loc = valueOf(rel_c_cmt);
    if (verCommitment(rel_c_cmt, rel_c_hash) && (r1_loc == rel_r2) &&
        verSig(0, rel_sigma, (rel_c_hash, rel_r2, msg.sender))) {
      if (winning_tickets < 2) {
        winning_tickets = winning_tickets + 1;
      }
      // TODO: czy ten if jest potrzebny?
      if (pot > 0) {
        msg.sender.send(1);
        pot = pot - 1;
      }
    }
  }

  function burn() {
    if ((winning_tickets >= 2) && (deposit >= 2)) {
      "null".send(2);
      deposit = deposit - 2;
    }
  }

  function release_deposit() {
    if (time_elapsed >= 2 && deposit >= 2) {
      // TODO: to 0 brzydko wygląda
      0.send(2);
      deposit = deposit - 2;
    }
  }
}    

communication {
  bool payment_requested;
  bool payment_issued;
  
  uint(2) comm_r2;
  hash comm_c_hash;
  address comm_a;
  signature(cmt_uint(2), uint(2), uint(2)) comm_sigma;

  // function copy_commitment?

  function payment_request(hash req_c_hash) {
    comm_c_hash = req_c_hash;
    comm_a = msg.sender;
    payment_requested = true;
  }

  function payment_issuance(hash iss_c_hash, uint(2) iss_r2, uint(2) iss_a) {
    comm_r2 = iss_r2;
    comm_sigma = sign(iss_c_hash, iss_r2, iss_a);
    payment_issued = true;
  }
  
}

scenario U {
  uint(2) r2;
  bool endU;

  wait(payment_requested, 1);
  // TODO: && time_elapsed < 1?
  if (payment_requested) {
    r2 = random(2);
    payment_issuance.sendCommunication(comm_c_hash, r2, comm_a);
  }
  wait(false, 2);
  release_deposit.sendTransaction({from: "U", value: 0});

  endU = true;
}

scenario M {
  cmt_uint(2) r1_cmt;
  uint(2) r1_val;
  uint(2) r2_loc;
  signature(cmt_uint(2), uint(2), uint(2)) sigma_loc;
  bool winM;
  bool endM;

  r1_cmt.randomCommitment();

  payment_request.sendCommunication(hashOf(r1_cmt));
  wait(payment_issued, 1);
  if (payment_issued && time_elapsed < 1) {
    r2_loc = comm_r2;
    sigma_loc = comm_sigma;
    // TODO: moj adres jest wpisany na sztywno. Da sie zrobić coś w stylu msg.sender w scenariuszu?
    if (verSig(0, sigma_loc, (hashOf(r1_cmt), r2_loc, 1))) {
      r1_val = valueOf(r1_cmt);
      if (r1_val == r2_loc) { 
        winM = true;
        release.sendTransaction(r1_cmt, r2_loc, hashOf(r1_cmt), sigma_loc, {from: "M", value: 0});
        wait(balance1 >= 1, 1);
        if ((balance1 < 1) && (winning_tickets >= 2)) {
          burn.sendTransaction({from: "M", value: 0});
        }
      }
    }
  }
  endM = true;
}
