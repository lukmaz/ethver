mdp

const int ADVERSARY;

const int T_NONE = 0;
const int T_BROADCAST = 1;
const int T_EXECUTED = 2;
const int T_INVALIDATED = 3;

const int NUM_CONTRACT_STATES = 12;
const int NUM_PLAYER0_STATES = 7;
const int NUM_PLAYER1_STATES = 3;

const int MAX_CONTRACT_BALANCE = 2;
const int MAX_USER_BALANCE = 2;

module blockchain
 sender : [0..1];
 val : [0..2];
 transfer_money : [0..2];
 withdraw_money : [0..2];

 // values: T_*
 deposit_state0 : [0..3];
 transfer_state0 : [0..3];
 withdraw_state0 : [0..3];

 deposit_state1 : [0..3];
 transfer_state1 : [0..3];
 withdraw_state1 : [0..3];


 [broadcast_deposit0] (cstate = 1) & (deposit_state0 != T_BROADCAST) -> (deposit_state0' = T_BROADCAST);
 [broadcast_transfer0] (cstate = 1) & (transfer_state0 != T_BROADCAST) -> (transfer_state0' = T_BROADCAST);
 [broadcast_withdraw0] (cstate = 1) & (withdraw_state0 != T_BROADCAST) -> (withdraw_state0' = T_BROADCAST);
 
 [broadcast_deposit] (cstate = 1) & (deposit_state0 = T_BROADCAST) & (deposit_val0 <= balance0)
	-> (sender' = 0) & (val' = deposit_val0) & (deposit_state0' = T_EXECUTED);
 [] (cstate = 1) & (deposit_state0 = T_BROADCAST) & (deposit_val0 > balance0) -> (deposit_state0' = T_INVALIDATED);

 [broadcast_transfer] (cstate = 1) & (transfer_state0 = T_BROADCAST) & (transfer_val0 <= balance0)
	-> (sender' = 0) & (val' = transfer_val0) & (transfer_money' = transfer_money0) & (transfer_state0' = T_EXECUTED);
 [] (cstate = 1) & (transfer_state0 = T_BROADCAST) & (transfer_val0 > balance0) -> (transfer_state0' = T_INVALIDATED);

 [broadcast_withdraw] (cstate = 1) & (withdraw_state0 = T_BROADCAST) & (withdraw_val0 <= balance0)
	-> (sender' = 0) & (val' = withdraw_val0) & (withdraw_money' = withdraw_money0) & (withdraw_state0' = T_EXECUTED);
 [] (cstate = 1) & (withdraw_state0 = T_BROADCAST) & (withdraw_val0 > balance0) -> (withdraw_state0' = T_INVALIDATED);


 [broadcast_deposit1] (cstate = 1) & (deposit_state1 != T_BROADCAST) -> (deposit_state1' = T_BROADCAST);
 [broadcast_transfer1] (cstate = 1) & (deposit_state1 != T_BROADCAST) -> (transfer_state1' = T_BROADCAST);
 [broadcast_withdraw1] (cstate = 1) & (deposit_state1 != T_BROADCAST) -> (withdraw_state1' = T_BROADCAST);
 
 [broadcast_deposit] (cstate = 1) & (deposit_state1 = T_BROADCAST) & (deposit_val1 <= balance1)
	-> (sender' = 1) & (val' = deposit_val1) & (deposit_state1' = T_EXECUTED);
 [] (cstate = 1) & (deposit_state1 = T_BROADCAST) & (deposit_val1 > balance1) -> (deposit_state1' = T_INVALIDATED);

 [broadcast_transfer] (cstate = 1) & (transfer_state1 = T_BROADCAST) & (transfer_val1 <= balance1)
	-> (sender' = 1) & (val' = transfer_val1) & (transfer_money' = transfer_money1) & (transfer_state1' = T_EXECUTED);
 [] (cstate = 1) & (transfer_state1 = T_BROADCAST) & (transfer_val1 > balance1) -> (transfer_state1' = T_INVALIDATED);

 [broadcast_withdraw] (cstate = 1) & (withdraw_state1 = T_BROADCAST) & (withdraw_val1 <= balance1)
	-> (sender' = 1) & (val' = withdraw_val1) & (withdraw_money' = withdraw_money1) & (withdraw_state1' = T_EXECUTED);
 [] (cstate = 1) & (withdraw_state1 = T_BROADCAST) & (withdraw_val1 > balance1) -> (withdraw_state1' = T_INVALIDATED);

endmodule


module contract
 cstate : [0..NUM_CONTRACT_STATES] init 1;
 balance0 : [0..2] init 2;
 balance1 : [0..2] init 0;
 contract_balance : [0..2];
 pot0 : [0..2];
 pot1 : [0..2];
 next_state : [0..NUM_CONTRACT_STATES];

//Exec transaction
[] (cstate = 0)
 & (sender = 0)
 & (balance0 >= val)
 & (contract_balance + val <= MAX_CONTRACT_BALANCE)
  ->
   (cstate' = next_state)
 & (balance0' = balance0 - val)
 & (contract_balance' = contract_balance + val);

[] (cstate = 0)
 & (sender = 1)
 & (balance1 >= val)
 & (contract_balance + val <= MAX_CONTRACT_BALANCE)
  ->
   (cstate' = next_state)
 & (balance1' = balance1 - val)
 & (contract_balance' = contract_balance + val);


//Deposit:
[broadcast_deposit] (cstate = 1) -> (next_state' = 2) & (cstate' = 0);

[] (cstate = 2)
 & (sender = 0)
  ->
   (cstate' = 3);

[] (cstate = 3)
 & (pot0 + val >= 0)
 & (pot0 + val <= 2)
  ->
   (cstate' = 1)
 & (pot0' = pot0 + val);

[] (cstate = 2)
 & (sender != 0)
  ->
   (cstate' = 1);

//Transfer:
[broadcast_transfer] (cstate = 1) -> (next_state' = 4) & (cstate' = 0);

[] (cstate = 4)
 & (sender = 0)
  ->
   (cstate' = 5);

[] (cstate = 5)
 & (pot0 - transfer_money >= 0)
 & (pot0 - transfer_money <= 2)
  ->
   (cstate' = 6)
 & (pot0' = pot0 - transfer_money);

[] (cstate = 6)
 & (pot1 + transfer_money >= 0)
 & (pot1 + transfer_money <= 2)
  ->
   (cstate' = 1)
 & (pot1' = pot1 + transfer_money);

[] (cstate = 4)
 & (sender != 0)
  ->
   (cstate' = 1);

//Withdraw:
[broadcast_withdraw] (cstate = 1) -> (next_state' = 7) & (cstate' = 0);

[] (cstate = 7)
 & (sender = 0)
  ->
   (cstate' = 8);

[] (cstate = 8)
 & (contract_balance >= withdraw_money)
 & (balance0 + withdraw_money <= MAX_USER_BALANCE)
  ->
   (cstate' = 9)
 & (contract_balance' = contract_balance - withdraw_money)
 & (balance0' = balance0 + withdraw_money);

[] (cstate = 9)
 & (pot0 - withdraw_money >= 0)
 & (pot0 - withdraw_money <= 2)
  ->
   (cstate' = 10)
 & (pot0' = pot0 - withdraw_money);

[] (cstate = 7)
 & (sender != 0)
  ->
   (cstate' = 10);

[] (cstate = 10)
 & (sender = 1)
  ->
   (cstate' = 11);

[] (cstate = 11)
 & (contract_balance >= withdraw_money)
 & (balance1 + withdraw_money <= MAX_USER_BALANCE)
  ->
   (cstate' = 12)
 & (contract_balance' = contract_balance - withdraw_money)
 & (balance1' = balance1 + withdraw_money);

[] (cstate = 12)
 & (pot1 - withdraw_money >= 0)
 & (pot1 - withdraw_money <= 2)
  ->
   (cstate' = 1)
 & (pot1' = pot1 - withdraw_money);

[] (cstate = 10)
 & (sender != 1)
  ->
   (cstate' = 1);
endmodule


module player0
 state0 : [-1..NUM_PLAYER0_STATES] init 0;
 deposit_val0 : [0..2];
 transfer_val0 : [0..2];
 transfer_money0 : [0..2];
 withdraw_val0 : [0..2];
 withdraw_money0 : [0..2];
 critical_section0 : bool;

//Honest user
 [] (ADVERSARY != 0) & (state0 = 0) -> (state0' = 1);

 [] (!critical_section0) & (!critical_section1) & (state0 = 1) -> (critical_section0' = true);
 [broadcast_deposit0] (critical_section0) & (cstate = 1) & (state0 = 1) -> 
	(deposit_val0' = 2) & (state0' = 2) & (critical_section0' = false);

 [] (!critical_section0) & (!critical_section1) & (state0 = 2) & (deposit_state0 = T_EXECUTED) -> (critical_section0' = true);
 [] (critical_section0) & (cstate = 1) & (state0 = 2) & (deposit_state0 = T_EXECUTED) -> 
	(state0' = 3) & (critical_section0' = false);

 [] (!critical_section0) & (!critical_section1) & (state0 = 3) -> (critical_section0' = true);
 [broadcast_transfer0] (critical_section0) & (cstate = 1) & (state0 = 3) -> 
	(transfer_val0' = 0) & (transfer_money0' = 1) & (state0' = 4) & (critical_section0' = false);

 [] (!critical_section0) & (!critical_section1) & (state0 = 4) & (transfer_state0 = T_EXECUTED) -> (critical_section0' = true);
 [] (critical_section0) & (cstate = 1) & (state0 = 4) & (transfer_state0 = T_EXECUTED) -> 
	(state0' = 5) & (critical_section0' = false);

 [] (!critical_section0) & (!critical_section1) & (state0 = 5) -> (critical_section0' = true);
 [broadcast_withdraw0] (critical_section0) & (cstate = 1) & (state0 = 5) -> 
	(withdraw_val0' = 0) & (withdraw_money0' = 1) & (state0' = 6) & (critical_section0' = false);

 [] (!critical_section0) & (!critical_section1) & (state0 = 6) & (withdraw_state0 = T_EXECUTED) -> (critical_section0' = true);
 [] (critical_section0) & (cstate = 1) & (state0 = 6) & (withdraw_state0 = T_EXECUTED) -> 
	(state0' = 7) & (critical_section0' = false);

//Adversary
 [] (ADVERSARY = 0) & (state0 = 0) -> (state0' = -1);

 [broadcast_deposit0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (deposit_val0' = 0);
 [broadcast_deposit0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (deposit_val0' = 1);
 [broadcast_deposit0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (deposit_val0' = 2);

//TODO: add args
 [broadcast_transfer0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (transfer_val0' = 0);
 [broadcast_transfer0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (transfer_val0' = 1);
 [broadcast_transfer0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (transfer_val0' = 2);

 [broadcast_withdraw0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (withdraw_val0' = 0);
 [broadcast_withdraw0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (withdraw_val0' = 1);
 [broadcast_withdraw0] (!critical_section1) & (cstate = 1) & (state0 = -1) -> (withdraw_val0' = 2);
endmodule

module player1
 state1 : [-1..NUM_PLAYER1_STATES] init 0;
 deposit_val1 : [0..2];
 transfer_val1 : [0..2];
 transfer_money1 : [0..2];
 withdraw_val1 : [0..2];
 withdraw_money1 : [0..2];
 critical_section1 : bool;

//Honest user
 [] (ADVERSARY != 1) & (state1 = 0) -> (state1' = 1);

 [] (!critical_section0) & (!critical_section1) & (state1 = 1) & (withdraw_state0 = T_EXECUTED) -> (critical_section1' = true);
 [broadcast_withdraw1] (critical_section1) & (cstate = 1) & (state1 = 1) & (withdraw_state0 = T_EXECUTED)
	-> (withdraw_val1' = 0) & (withdraw_money1' = 1) & (state1' = 2) & (critical_section1' = false);

 [] (!critical_section0) & (!critical_section1) & (state1 = 2) & (withdraw_state1 = T_EXECUTED) -> (critical_section1' = true);
 [] (critical_section1) & (cstate = 1) & (state1 = 2) & (withdraw_state1 = T_EXECUTED)
	-> (state1' = 3) & (critical_section1' = false);

//Adversary
 [] (ADVERSARY = 1) & (state1 = 0) -> (state1' = -1);

 [broadcast_deposit1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (deposit_val1' = 0);
 [broadcast_deposit1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (deposit_val1' = 1);
 [broadcast_deposit1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (deposit_val1' = 2);

//TODO: add args
 [broadcast_transfer1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (transfer_val1' = 0);
 [broadcast_transfer1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (transfer_val1' = 1);
 [broadcast_transfer1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (transfer_val1' = 2);

 [broadcast_withdraw1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (withdraw_val1' = 0);
 [broadcast_withdraw1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (withdraw_val1' = 1);
 [broadcast_withdraw1] (!critical_section0) & (cstate = 1) & (state1 = -1) -> (withdraw_val1' = 2);
endmodule
