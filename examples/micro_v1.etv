user "U";
user "M";

CONTRACT_BALANCE_MAX = 1;
CONTRACT_BALANCE_INIT = 1;
USER_BALANCE_MAX = 1;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 1;
MAX_TIME = 2;
TIME_DELTA = 3600;

contract Micropay {
  cash(2) pot = finney(1);
  uint(2) r1_loc;
  address escrowAddress;

  constructor() {
    escrowAddress = msg.sender;
  }

  function release(cmt_uint(2) rel_c_cmt, uint(2) rel_r2, 
      hash rel_c_hash, 
      signature(hash, uint(2), address) rel_sigma) 
      public {
    r1_loc = valueOf(rel_c_cmt);
    if (verCmt(rel_c_cmt, rel_c_hash) && 
        (r1_loc == rel_r2) && verSig(escrowAddress, rel_sigma, 
          (rel_c_hash, rel_r2, msg.sender))) {
      if (pot > 0) {
        msg.sender.transfer(finney(1));
        pot = pot - finney(1);
      }
    }
  }
}    

communication {
  bool payment_requested;
  bool payment_issued;
  
  uint(2) comm_r2;
  hash comm_c_hash;
  address comm_a;
  signature(hash, uint(2), address) comm_sigma;

  function payment_request(hash req_c_hash) public {
    comm_c_hash = req_c_hash;
    comm_a = msg.sender;
    payment_requested = true;
  }

  function payment_issuance(hash iss_c_hash, uint(2) iss_r2, 
      address iss_a) public {
    comm_r2 = iss_r2;
    comm_sigma = sign(iss_c_hash, iss_r2, iss_a);
    payment_issued = true;
  }
  
}

scenario U {
  uint(2) r2;
  bool endU;

  wait(payment_requested, 1);
  if (payment_requested) {
    r2 = random(2);
    payment_issuance.sendCommunication(comm_c_hash, r2, 
      comm_a);
  }

  endU = true;
}

scenario M {
  cmt_uint(2) r1_cmt;
  uint(2) r1_val;
  uint(2) r2_loc;
  signature(hash, uint(2), address) sigma_loc;
  bool winM;
  bool endM;
  bool signature_verified;
  
  address merchantAddress = this;

  r1_cmt.randomCmt();

  payment_request.sendCommunication(hashOf(r1_cmt));
  wait(payment_issued, 1);
  if (payment_issued && time_elapsed < 1) {
    r2_loc = comm_r2;
    sigma_loc = comm_sigma;
    if (verSig(escrowAddress, sigma_loc, (hashOf(r1_cmt), 
        r2_loc, merchantAddress))) {
      signature_verified = true;
      r1_cmt.revealCmt();
      r1_val = valueOf(r1_cmt);
      if (r1_val == r2_loc) { 
        winM = true;
        release.sendTransaction(r1_cmt, r2_loc, 
            hashOf(r1_cmt), sigma_loc, 
            {value: 0});
      }
    }
  }
  endM = true;
}
