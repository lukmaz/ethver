// P1: ADV = -1
// P2: ADV = -1
// P3: ADV = 1
// P4: ADV = 0

user "U";
user "M";

CONTRACT_BALANCE_MAX = 1;
CONTRACT_BALANCE_INIT = 1;
USER_BALANCE_MAX = 1;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 1;
MAX_TIME = 2;
MAX_SIGNATURES = 3;
MAX_COMMITMENTS = 2;

// c1, r1 - values in honest mode, recipient = 1
// c0, r0 - values in adversarial mode, recipient = 0
// rM - values from Merchant role of the protocol
// rU - values from User role of the protocol

contract Micropay {
  uint(2) pot = 1;

  function_limit 2 release(cmt_uint(2) rel_c, uint(2) rel_rU) {
    if (checkCommitment(rel_c, rel_rU)) {
      if (pot > 0 && verSig(0, sigma[msg.sender], (rel_c, rel_rU, msg.sender))) {
        msg.sender.send(1);
        pot = pot - 1;
      }
    }
  }
}    

communication {
  cmt_uint(2) commitmentM[2];
  uint(2) nothing;
  bool is_signedU; // wyluskac z podpisu
  uint(2) randU;
  signature(cmt_uint(2), uint(2), uint(2)) sigma[2];

  // function copy_commitment?

  function payment_request() {
    if (commitmentM[msg.sender] == 3) { // TODO: ladna nazwa
      commitmentM[msg.sender].randomCommitment();
    }
  }

  function payment_issuance(cmt_uint(2) pay_c, uint(2) pay_r, uint(2) pay_a) {
    randU = pay_r;
    is_signedU = true;
    sigma[msg.sender] = sign(pay_c, pay_r, pay_a);
  }

  function open() {
    if (msg.sender == 1 && commitmentM[msg.sender] == 2) {
      // TODO: zrobic samo openCommitment jako≈õ
      nothing = valueOf(commitmentM[msg.sender]);
    }
  }
}

scenario U {
  uint(2) rand0;
  bool endU;

  wait(commitmentM[1] < 3, 1);
  if (commitmentM[1] < 3) {
    rand0 = random(2);
    payment_issuance.sendCommunication(commitmentM[1], rand0, 1);
  }

  endU = true;
}

scenario M {
  bool win;
  uint(2) rand1;
  bool endM;

  payment_request.sendCommunication();
  wait(is_signedU, 1);
  if (is_signedU && time_elapsed < 1) {
    rand1 = randU;
    copy_signature.sendCommunication();
    if (sigma_1_sig0 == 1 && sigma_1_sig1 == rand1 && sigma_1_sig2 == 1) {
      open.sendCommunication();
      if (commitmentM[1] == rand1) {
        win = true;
        release.sendTransaction(commitmentM[1], rand1, {from: "M", value: 0});
      }
    }
  }
  endM = true;
}
