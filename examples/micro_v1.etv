// P0: ADV = -1
// P1: ADV = 0
// P2: ADV = 1

user "U";
user "M";

CONTRACT_BALANCE_MAX = 1;
CONTRACT_BALANCE_INIT = 1;
USER_BALANCE_MAX = 1;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 1;
MAX_TIME = 2;

// c1, r1 - values in honest mode, recipient = 1
// c0, r0 - values in adversarial mode, recipient = 0
// rM - values from Merchant role of the protocol
// rU - values from User role of the protocol

contract RPS {
  uint(2) pot = 1;

  function release() {
    if (msg.sender == 0) {
      if ((pot > 0) && is_signedU && is_openedM && ((randM + saltM) % 2 == commitmentM) && (randM == signed_randU)) {
        0.send(1);
        pot = pot - 1;
      }
    }
    else {
      if ((pot > 0) && is_signedU && is_openedM && ((randM + saltM) % 2 == commitmentM) && (randM == signed_randU)) {
        1.send(1);
        pot = pot - 1;
      }
    }
  }
}    

communication {
  uint(2) commitmentM;
  bool is_committedM;
  bool is_openedM;
  bool is_signedU;
  uint(2) randM;
  uint(2) saltM;
  uint(2) randU;
  uint(2) signed_randU;

  function payment_request() {
    if (msg.sender == 1 && !is_signedU) {
      commitmentM = random(2);
      is_committedM = true;
    }
  }

  function payment_issuance(uint(2) r, uint(2) recipient) {
    if (msg.sender == 0 && is_committedM) {
      randU = r;
      is_signedU = true;
    }
  }
  function open() {
    if (msg.sender == 1 && !is_openedM) {
      randM = random(2);
      signed_randU = randU;
      saltM = (commitmentM - randM + 2) % 2;
      is_openedM = true;
    }
  }
}

scenario U {
  uint(2) rand0;
  bool endU;

  wait(is_committedM, 1);
  if (is_committedM) {
    rand0 = random(2);
    payment_issuance.sendCommunication(rand0, 1);
  }

  endU = true;
}

scenario M {
  bool endM;

  payment_request.sendCommunication();
  wait(is_signedU, 1);
  if (is_signedU && time_elapsed < 1) {
    open.sendCommunication();
    if (randM == signed_randU) {
      release.sendTransaction({from: "M", value: 0});
    }
  }
  endM = true;
}
