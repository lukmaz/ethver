contract RPS {
	uint bid = 1 ether;

	struct Player {
		address addr;
		uint choice;
	}
	Player[2] public player;

	uint public num_players;
	uint public reward;
	/* captures the rules of rock-paper-scissors game */
	int[3][3] public check_winner;
	
	int public input_res;
	int public winner;
	
	function RPS() {
		/* If 2, tie
		   If 0, player 0 wins
		   If 1, player 1 wins
		   0 = rock
		   1 = paper
		   2 = scissors */

		check_winner[0][0] = 2;
		check_winner[1][1] = 2;
		check_winner[2][2] = 2;

		/* Rock beats scissors */
		check_winner[0][2] = 0;
		check_winner[2][0] = 1;

		/* Scissors beats paper */
		check_winner[2][1] = 0;
		check_winner[1][2] = 1;

		/* Paper beats rock */
		check_winner[1][0] = 0;
		check_winner[0][1] = 1;

		num_players = 0;
		reward = 0;
	}

	/* adds players who send bid to the contract to the game */
	function player_input(uint choice) {
		if (num_players < 2 && msg.value == bid) { 
			reward += msg.value;
			player[num_players].addr = msg.sender;
			player[num_players].choice = choice;
			num_players++;
			input_res = 0;
		}
		else {
			input_res = -1;
		}
	}

	function finalize() {
		uint p0 = player[0].choice;
		uint p1 = player[1].choice;
		/* If player 0 wins */
		if (check_winner[p0][p1] == 0) {
			player[0].addr.send(reward);
			winner = 0;
		}
		/* If player 1 wins */
		else if (check_winner[p0][p1] == 1) {
			player[1].addr.send(reward);
			winner = 1;
		}
		/* If no one wins */
		else {
			player[0].addr.send(reward/2);
			player[1].addr.send(reward/2);
			winner = 2;
		}
	}
}