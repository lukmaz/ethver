user "U";
user "M";

CONTRACT_BALANCE_MAX = 4;
CONTRACT_BALANCE_INIT = 1;
USER_BALANCE_MAX = 4;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;

contract RPS {
  function get_payment() {
    if (is_signed[msg.sender] && is_opened[msg.sender]) {
      if (randM[msg.sender] == randU[msg.sender]) {
        msg.sender.send(1);
      }
    }
  }
}

communication {
  random_uint(3) commit[2];
  bool is_committed[2];
  bool is_opened[2];
  bool is_signed[2];
  bool product_asked;
  uint(3) randM[2];
  uint(3) randU[2];
  uint(10) products_sent;

  function ask_product() {
    if (msg.sender == "U") {
      product_asked = true;
    }
  }

  function ask_payment(random_uint(3) commit) {
    if (!is_committed[msg.sender]) {
      commit[msg.sender] = commit;
      is_committed[msg.sender] = true;
      is_opened[msg.sender] = false;
      is_signed[msg.sender] = false;
      if (msg.sender == "M") {                //& products_sent + 1 < 10 (?)
        products_sent = products_sent + 1;
      }
    }
  }

  function send_ticket(uint(2) merchant, uint(3) r) {
    if (((msg.sender == "U") && (is_committed[merchant])) && ((!is_opened[merchant]) && (!is_signed[merchant]))) {
      randU[merchant] = r;
      is_signed[merchant] = true;
    }
  }

  function open() {
    if (is_signed[msg.sender] && !is_opened[msg.sender]) {
      if (commit[msg.sender] == 3) {
        randM[msg.sender] = random(3);
      }
      else {
        randM[msg.sender] = commit[msg.sender];
      }
      is_opened[msg.sender] = true;
    }
  }

  function reset() {
    if (is_signed[msg.sender] && is_opened[msg.sender]) {
      commit[msg.sender] = 0;
      randU[msg.sender] = 0;
      randM[msg.sender] = 0;
      is_committed[msg.sender] = false;
      is_opened[msg.sender] = false;
      is_signed[msg.sender] = false;
      product_asked = false;
    }
  }
}

scenario U {
  uint(3) r0;
  
  ask_product.sendCommunication();
  wait(is_committed["M"]);
  r0 = random(3);
  send_ticket.sendCommunication(1, r0);
  wait(!product_asked);

  ask_product.sendCommunication();
  wait(is_committed["M"]);
  r0 = random(3);
  send_ticket.sendCommunication(1, r0);
}

scenario M {
  random_uint(3) r1;

  wait(product_asked);
  r1 = random_lazy(3);
  if (contract_balance > 0) {
    ask_payment.sendCommunication(r1);
    wait(is_signed["M"]);
    open.sendCommunication();
    if (randU["M"] == randM["M"]) {
      get_payment.sendTransaction({from: "M", value: 0});
    }
    reset.sendCommunication();
  }

  wait(product_asked);
  r1 = random_lazy(3);
  if (contract_balance > 0) {
    ask_payment.sendCommunication(r1);
    wait(is_signed["M"]);
    open.sendCommunication();
    if (randU["M"] == randM["M"]) {
      get_payment.sendTransaction({from: "M", value: 0});
    }
    reset.sendCommunication();
  }
}

