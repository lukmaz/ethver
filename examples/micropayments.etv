user "U";
user "M";

CONTRACT_BALANCE_MAX = 4;
CONTRACT_BALANCE_INIT = 2;
USER_BALANCE_MAX = 4;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 5;

contract RPS {
  function get_payment() {
    if ((((contract_balance > 0) && is_signed[msg.sender]) && is_opened[msg.sender]) && (randM[msg.sender] == randU[msg.sender])) {
      msg.sender.send(1);
    }
  }
}

communication {
  random_uint(3) commit[2];
  bool is_committed[2];
  bool is_opened[2];
  bool is_signed[2];
  bool product_asked;
  uint(3) randM[2];
  uint(3) randU[2];
  uint(10) products_sent;

  function ask_product() {
    if (msg.sender == "U") {
      product_asked = true;
    }
  }

  function ask_payment(random_uint(3) cmt) {
    if (!is_committed[msg.sender]) {
      commit[msg.sender] = cmt;
      is_committed[msg.sender] = true;
      is_opened[msg.sender] = false;
      is_signed[msg.sender] = false;
    }
    if (msg.sender == 1 && products_sent + 1 < 10) {
      products_sent = products_sent + 1;
    }
  }

  function send_ticket(uint(2) merchant, uint(3) r) {
    if (((msg.sender == "U") && (is_committed[merchant])) && ((!is_opened[merchant]) && (!is_signed[merchant]))) {
      randU[merchant] = r;
      is_signed[merchant] = true;
    }
  }

  function open() {
    if ((is_signed[msg.sender] && !is_opened[msg.sender])) {
        if (commit[msg.sender] == 3) {
          randM[msg.sender] = random(3);
          is_opened[msg.sender] = true;
        }
        else {
          randM[msg.sender] = commit[msg.sender];
          is_opened[msg.sender] = true;
        }
    }
  }

  function reset() {
    if ((is_signed[msg.sender] && is_opened[msg.sender])) {
      commit[msg.sender] = 0;
      randU[msg.sender] = 0;
      randM[msg.sender] = 0;
      is_committed[msg.sender] = false;
      is_opened[msg.sender] = false;
      is_signed[msg.sender] = false;
      product_asked = false;
    }
  }
}

scenario U {
  uint(3) rand0;
  bool endU;
  uint(3) i0;
  i0 = 0;

  while (i0 < 2) {
    ask_product.sendCommunication();
    wait(is_committed["M"]);
    if (is_committed["M"]) {
      rand0 = random(3);
      send_ticket.sendCommunication(1, rand0);
    }
    /*
    else {
      break;
    }
    */
    i0 = i0 + 1;
  }
  endU = true;
}

scenario M {
  random_uint(3) rand1;
  bool endM;
  uint(3) i1;
  i1 = 0;

  while (i1 < 2) {
    rand1 = random_lazy(3);
    wait(product_asked);
    if (product_asked && contract_balance > 0) {
      ask_payment.sendCommunication(rand1);
      wait(is_signed["M"]);
      if (is_signed["M"]) {
        open.sendCommunication();
        if (randU["M"] == randM["M"]) {
          get_payment.sendTransaction({from: "M", value: 0});
          wait(contract_balance == 0);
          if (balance1 == 0) {
            break;
          }
        }
        reset.sendCommunication();
      }
      else {
        break;
      }
    }
    /*
    else {
      break;
    }
    */
    i1 = i1 + 1;
  }
  endM = true;
}

