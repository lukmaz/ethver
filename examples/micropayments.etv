user "U";
user "M";

CONTRACT_BALANCE_MAX = 4;
CONTRACT_BALANCE_INIT = 2;
USER_BALANCE_MAX = 4;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 5;

contract RPS {
  function get_payment() {
    if (contract_balance > 0) {
      if (msg.sender == 0) {
        if (is_signed[0] && is_opened[0]) {
          if (randM[0] == randU[0]) {
            0.send(1);
          }
        }
      }
      else {
        if (is_signed[1] && is_opened[1]) {
          if (randM[1] == randU[1]) {
            1.send(1);
          }
        }
      }
    }
  }
}

communication {
  random_uint(3) commit[2];
  bool is_committed[2];
  bool is_opened[2];
  bool is_signed[2];
  bool product_asked;
  uint(3) randM[2];
  uint(3) randU[2];
  uint(10) products_sent;

  function ask_product() {
    if (msg.sender == "U") {
      product_asked = true;
    }
  }

  function ask_payment(random_uint(3) commit) {
    if (msg.sender == 0) {
      if (!is_committed[0]) {
        commit[0] = commit;
        is_committed[0] = true;
        is_opened[0] = false;
        is_signed[0] = false;
      }
    }
    else {
      if (!is_committed[1]) {
        commit[1] = commit;
        is_committed[1] = true;
        is_opened[1] = false;
        is_signed[1] = false;
        products_sent = products_sent + 1;
      }
    }
  }

  function send_ticket(uint(2) merchant, uint(3) r) {
    if (((msg.sender == "U") && (is_committed[merchant])) && (!is_opened[merchant] && !is_signed[merchant])) {
      randU[merchant] = r;
      is_signed[merchant] = true;
    }
  }

  function open() {
    if (msg.sender == 0) {
      if (is_signed[0] && !is_opened[0]) {
        if (commit[0] == 3) {
          randM[0] = random(3);
        }
        else {
          randM[0] = commit[0];
        }
        is_opened[0] = true;
      }
    }
    else {
      if (is_signed[1] && !is_opened[1]) {
        if (commit[1] == 3) {
          randM[1] = random(3);
        }
        else {
          randM[1] = commit[1];
        }
        is_opened[1] = true;
      }
    }
  }

  function reset() {
    if (msg.sender == 0) {
      if (is_signed[0] && is_opened[0]) {
        commit[0] = 0;
        randU[0] = 0;
        randM[0] = 0;
        is_committed[0] = false;
        is_opened[0] = false;
        is_signed[0] = false;
        product_asked = false;
      }
    }
    else {
      if (is_signed[1] && is_opened[1]) {
        commit[1] = 0;
        randU[1] = 0;
        randM[1] = 0;
        is_committed[1] = false;
        is_opened[1] = false;
        is_signed[1] = false;
        product_asked = false;
      }
    }
  }
}

scenario U {
  uint(3) r0;
  bool endU;
  
  ask_product.sendCommunication();
  wait(is_committed["M"]);
  if (is_committed["M"]) {
    r0 = random(3);
    send_ticket.sendCommunication(1, r0);
    wait(!product_asked);

    if (!product_asked) {
      ask_product.sendCommunication();
      wait(is_committed["M"]);
      if (is_committed["M"]) {
        r0 = random(3);
        send_ticket.sendCommunication(1, r0);
      }
    }
  }
  endU = true;
}

scenario M {
  random_uint(3) r1;
  bool endM;

  r1 = random_lazy(3);
  wait(product_asked);
  if (product_asked && contract_balance > 0) {
    ask_payment.sendCommunication(r1);
    wait(is_signed["M"]);
    if (is_signed["M"]) {
      open.sendCommunication();
      if (randU["M"] == randM["M"]) {
        get_payment.sendTransaction({from: "M", value: 0});
      }
      reset.sendCommunication();
      r1 = random_lazy(3);
      wait(product_asked);
      if (product_asked && contract_balance > 0) {
        ask_payment.sendCommunication(r1);
        wait(is_signed["M"]);
        if (is_signed["M"]) {
          open.sendCommunication();
          if (randU["M"] == randM["M"]) {
            get_payment.sendTransaction({from: "M", value: 0});
          }
          reset.sendCommunication();
        }
      }
    }
  }
  endM = true;
}

