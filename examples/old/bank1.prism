mdp

const int NUM_STATES_CONTR = 7;
const int NUM_STATES_P0 = 3;
const int NUM_STATES_P1 = 3;


module blockchain
endmodule

module contract
cstate : [1..NUM_STATES_CONTR];
potA : [0..2];
potB : [0..2];
[] (cstate = 1)
 & (sender = 1)
  ->
   (cstate' = 2);

[] (cstate = 2)
 & (potA + value >= 0)
 & (potA + value <= 2)
  ->
   (cstate' = 3)
 & (potA' = potA + value);

[] (cstate = 1)
 & (sender != 1)
  ->
   (cstate' = 3);

[] (cstate = 3)
 & (sender = 1)
  ->
   (cstate' = 4);

[] (cstate = 4)
 & (potA - 0 >= 0)
 & (potA - 0 <= 2)
  ->
   (cstate' = 5)
 & (potA' = potA - 0);

[] (cstate = 3)
 & (sender != 1)
  ->
   (cstate' = 5);

[] (cstate = 5)
 & (sender = 2)
  ->
   (cstate' = 6);

[] (cstate = 6)
 & (potB - 0 >= 0)
 & (potB - 0 <= 2)
  ->
   (cstate' = 7)
 & (potB' = potB - 0);

[] (cstate = 5)
 & (sender != 2)
  ->
   (cstate' = 7);

endmodule

module player0
state0 : [1..NUM_STATES_P0];
[broadcast_deposit0] (state0 = 1)
 & (cstate = 1)
  ->
   (state0' = 2)
 & (deposit_val0' = 2);

[] (state0 = 2)
 & (cstate = 1)
 & (deposit_state0 = T_EXECUTED)
  ->
   (state0' = 3);

endmodule

module player1
state1 : [1..NUM_STATES_P1];
[broadcast_withdraw0] (state1 = 1)
 & (cstate = 1)
  ->
   (state1' = 2)
 & (withdraw_val0' = 0);

[] (state1 = 2)
 & (cstate = 1)
 & (withdraw_state0 = T_EXECUTED)
  ->
   (state1' = 3);

endmodule