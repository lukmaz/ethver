user "U";
user "M";

CONTRACT_BALANCE_MAX = 4;
CONTRACT_BALANCE_INIT = 2;
USER_BALANCE_MAX = 4;
USER0_BALANCE_INIT = 0;
USER1_BALANCE_INIT = 0;
MAX_VALUE = 5;

contract RPS {
  function get_payment() {
    //if (msg.sender == 0) {
    //  if ((((contract_balance > 0) && is_signed0) && is_opened0) && (randM0 == randU0)) {
        0.send(1);
    //  }
    //}

    /*
    if (msg.sender == 1) {
      if ((((contract_balance > 0) && is_signed1) && is_opened1) && (randM1 == randU1)) {
        1.send(1);
      }
    }
    */
  }

}

communication {
  random_uint(3) commit0;
  random_uint(3) commit1;
  bool is_committed0;
  bool is_committed1;
  bool is_opened0;
  bool is_opened1;
  bool is_signed0;
  bool is_signed1;
  bool product_asked;
  uint(3) randM0;
  uint(3) randM1;
  uint(3) randU0;
  uint(3) randU1;
  uint(10) products_sent;

/*
  function ask_product() {
    if (msg.sender == 0) {
      product_asked = true;
    }
  }
*/

  function ask_payment(random_uint(3) cmt) {
    // TODO: sztuczne:
    products_sent = 1;




/*
    if (msg.sender == 0) {
      if (!is_committed0) {
        commit0 = cmt;
        is_committed0 = true;
        is_opened0 = false;
        is_signed0 = false;
      }
    }
    if (msg.sender == 1) {
      if (!is_committed1) {
        commit1 = cmt;
        is_committed1 = true;
        is_opened1 = false;
        is_signed1 = false;
      }
    }

    if ((msg.sender == 1) && (products_sent + 1 < 10)) {
      products_sent = products_sent + 1;
    }
*/
  }

/*
  function send_ticket(uint(2) merchant, uint(3) r) {
    if (msg.sender == 0) {
      if (merchant == 0) {
        if ((is_committed0) && (!is_opened0) && (!is_signed0)) {
          randU0 = r;
          is_signed0 = true;
        }
      }
      if (merchant == 1) {
        if ((is_committed1) && (!is_opened1) && (!is_signed1)) {
          randU1 = r;
          is_signed1 = true;
        }
      }
    }
  }

  function open() {
    if (msg.sender == 0) {
      if (is_signed0 && !is_opened0) {
        if (commit0 == 3) {
          randM0 = random(3);
          is_opened0 = true;
        }
        else {
          randM0 = commit0;
          is_opened0 = true;
        }
      }
    }
    if (msg.sender == 1) {
      if (is_signed1 && !is_opened1) {
        if (commit1 == 3) {
          randM1 = random(3);
          is_opened1 = true;
        }
        else {
          randM1 = commit1;
          is_opened1 = true;
        }
      }
    }
  }

  function reset() {
    if (msg.sender == 0) {
      if (is_signed0 && is_opened0) {
        commit0 = 0;
        randU0 = 0;
        randM0 = 0;
        is_committed0 = false;
        is_opened0 = false;
        is_signed0 = false;
        product_asked = false;
      }
    }
  }
  */
}

scenario U {

  uint(3) rand0;
  bool endU;
  uint(3) i0;
  i0 = 0;
/*
  while (i0 < 2) {
    wait(!product_asked);
    ask_product.sendCommunication();
    wait(is_committed1);
    if (is_committed1) {
      rand0 = random(3);
      send_ticket.sendCommunication(1, rand0);
    }
    else {
      break;
    }
    i0 = i0 + 1;
  }
  endU = true;
*/
}

scenario M {
  random_uint(3) rand1;
  bool endM;
  uint(3) targetBalance;
  uint(3) i1;
  i1 = 0;

/*
  while (i1 < 2) {
    rand1 = random_lazy(3);
    wait(product_asked);
    if (product_asked && contract_balance > 0) {
      ask_payment.sendCommunication(rand1);
      wait(is_signed1);
      if (is_signed1) {
        open.sendCommunication();
        if (randU1 == randM1) {
          targetBalance = contract_balance - 1;
          get_payment.sendTransaction({from: "M", value: 0});
          wait(contract_balance == targetBalance);
        }
        reset.sendCommunication();
      }
      else {
        break;
      }
    }
    else {
      break;
    }
    i1 = i1 + 1;
  }
  endM = true;
*/
}

