-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import LexEthver
import ParEthver
import CompilerEthEthver
import CompilerPrismEthver
import PrintEthver
import AbsEthver




import ErrM

type ParseFun = [Token] -> Err Program

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: Verbosity -> ParseFun -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p f

run :: Verbosity -> ParseFun -> FilePath -> String -> IO ()
run v p f s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do putStrLn "\nParse Successful!"
                          showTree v tree
                          let (contr, scen) = ethTree tree
                          putStrLn ("Writing file " ++ (contrFileName f))
                          writeFile
                            (contrFileName f)
                            contr
                          putStrLn ("Writing file " ++ (scenFileName f))
                          writeFile
                            (scenFileName f)
                            scen
                          let ver = verTree tree
                          putStrLn ("Writing file " ++ (verFileName f))
                          writeFile
                            (verFileName f)
                            ver

contrFileName :: String -> String
contrFileName = (++ "sol") . reverse . drop 3 . reverse

scenFileName :: String -> String
scenFileName = (++ "scen") . reverse . drop 3 . reverse

verFileName :: String -> String
verFileName = (++ "prism") . reverse . drop 3 . reverse

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    -- [] -> hGetContents stdin >>= run 2 pProgram
    -- "-s":fs -> mapM_ (runFile 0 pProgram) fs
    [fs] -> mapM_ (runFile 2 pProgram) [fs]
    _ -> usage






