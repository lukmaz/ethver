comment "//" ;
comment "/*" "*/" ;

Prog.     Program  ::= [UserDecl] [ConstantDecl] Contract Communication [Scenario] ;

terminator UserDecl ";" ;
terminator ConstantDecl ";" ;
terminator Scenario "" ;

-- USERS

UDec.   UserDecl ::= "user" String ;

-- CONSTANTS

Const.  ConstantDecl ::= Ident "=" Integer ;

-- CONTRACT

Contr.    Contract ::= "contract" Ident "{" [Decl] Constructor [Function] "}" ;
Dec.      Decl     ::= Type Ident ;
DecInit.  Decl     ::= Type Ident "=" Exp ;
ArrDec.   Decl     ::= Type Ident "[" Integer "]" ;
MapDec.   Decl     ::= "mapping" "(" "address" "=>" Type ")" Ident ;

terminator Decl ";" ;
terminator Function "" ;

Constr.    Constructor ::= "constructor" "(" ")" "{" [Stm] "}" ;

-- COMMUNICATION

Comm.  Communication ::= "communication" "{" [Decl] [Function] "}" ;

-- SCENARIO

Scen.  Scenario ::= "scenario" Ident "{" [Decl] [Stm] "}" ;

Fun.      Function ::= "function" Ident "(" [Arg] ")" "{" [Stm] "}" ;
FunL.     Function ::= "function_limit" Integer Ident "(" [Arg] ")" "{" [Stm] "}" ;
FunV.     Function ::= "function_with_value" Ident "(" [Arg] ")" "{" [Stm] "}" ;
FunVL.    Function ::= "function_with_value_limit" Integer Ident "(" [Arg] ")" "{" [Stm] "}" ;

Ar.   Arg  ::= Type Ident ;

separator  Arg "," ;

-- SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SAss.    Stm ::= Ident "=" Exp ";" ;
SArrAss. Stm ::= Ident "[" Exp "]" "=" Exp ";" ;
SIf.     Stm ::= "if" "(" Exp ")" Stm ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm ;
SReturn. Stm ::= "return" Exp  ";" ;
SSend.   Stm ::= Exp "." "send" "(" Exp ")" ";" ;
SSendT.  Stm ::= Exp "." "sendTransaction" "(" [CallArg] ")" ";" ;
SSendC.  Stm ::= Exp "." "sendCommunication" "(" [Exp] ")" ";" ;
SRCmt.   Stm ::= Exp "." "randomCommitment" "(" ")" ";" ;
SOCmt.   Stm ::= Exp "." "openCommitment" "(" ")" ";" ;
SWait.   Stm ::= "wait" "(" Exp "," Exp ")" ";" ;
SBreak.  Stm ::= "break" ";" ;

terminator Stm "" ;
separator Exp "," ;

EOr.     Exp ::= Exp "||" Exp1 ;
EAnd.    Exp1 ::= Exp1 "&&" Exp2 ;
EEq.     Exp2 ::= Exp2 "==" Exp3 ;
ENe.     Exp2 ::= Exp2 "!=" Exp3 ;
ELt.     Exp3 ::= Exp3 "<" Exp4 ;
ELe.     Exp3 ::= Exp3 "<=" Exp4 ;
EGt.     Exp3 ::= Exp3 ">" Exp4 ;
EGe.     Exp3 ::= Exp3 ">=" Exp4 ;
EAdd.    Exp4 ::= Exp4 "+" Exp5 ;
ESub.    Exp4 ::= Exp4 "-" Exp5 ;
EMul.    Exp5 ::= Exp5 "*" Exp6 ;
EDiv.    Exp5 ::= Exp5 "/" Exp6 ;
EMod.    Exp5 ::= Exp5 "%" Exp6 ;
ENeg.    Exp6 ::= "-" Exp7 ;
ENot.    Exp6 ::= "!" Exp7 ;
EArray.  Exp7 ::= Ident "[" Exp "]" ;
--ECall.   Exp7 ::= Ident "." "call" "(" [Exp] ")" ;
ERand.   Exp7 ::= "random" "(" Exp ")" ;
ESign.   Exp7 ::= "sign" "(" [Exp] ")" ;
EVerS.   Exp7 ::= "verSig" "(" Exp "," Exp "," "(" [Exp] ")" ")" ;
EVerC.   Exp7 ::= "verCommitment" "(" Exp "," Exp ")" ;
EValOf.  Exp7 ::= "valueOf" "(" Exp ")" ;
EHashOf. Exp7 ::= "hashOf" "(" Exp ")" ;
EVar.    Exp7 ::= Ident ;
EValue.  Exp7 ::= "msg" "." "value" ;
ESender. Exp7 ::= "msg" "." "sender" ;
EStr.    Exp7 ::= String ;
EInt.    Exp7 ::= Integer ;
EFinney. Exp7 ::= "finney" "(" Integer ")" ;
ETrue.   Exp7 ::= "true" ;
EFalse.  Exp7 ::= "false" ;

_. Exp   ::= Exp1 ;
_. Exp1  ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
-- _. Exp8  ::= "(" Exp ")" ;

coercions Exp 8 ;
separator CallArg "," ;

AExp.   CallArg ::= Exp ;
ABra.   CallArg ::= "{" "from" ":" Exp "," "value" ":" Exp "}" ;

TUInt.   Type ::= "uint" "(" Integer ")" ;
TBool.   Type ::= "bool" ;
TCUInt.  Type ::= "cmt_uint" "(" Integer ")" ;
TSig.    Type ::= "signature" "(" [Type] ")" ;
TAddr.   Type ::= "address" ;
TNonce.  Type ::= "nonce" ;
THash.   Type ::= "hash" ;

separator Type "," ;

