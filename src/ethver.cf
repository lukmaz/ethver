comment "//" ;
comment "/*" "*/" ;

Prog.     Program  ::= [UserDecl] Contract Communication [Scenario] ;
terminator Scenario "" ;

-- CONTRACT

Contr.    Contract ::= "contract" Ident "{" [Decl] [Function] "}" ;

-- COMMUNICATION

Comm.  Communication ::= "communication" "{" [Decl] [Function] "}" ;

-- SCENARIO

Scen.  Scenario ::= "scenario" Ident "{" [Decl] [Stm] "}" ;

terminator UserDecl ";" ;
terminator Decl ";" ;
terminator Function "" ;

UDec.   UserDecl ::= "user" String ;
Dec.    Decl     ::= Type Ident ;
ArrDec. Decl     ::= Type Ident "[" Integer "]" ;

Fun.      Function ::= "function" Ident "(" [Arg] ")" "{" [Stm] "}" ;
FunV.     Function ::= "function_with_value" Ident "(" [Arg] ")" "{" [Stm] "}" ;
FunR.     Function ::= "function" Ident "(" [Arg] ")" "returns" "(" Type ")" 
                       "{" [Stm] "}" ;

Ar.   Arg  ::= Type Ident ;

separator  Arg "," ;

SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SIf.     Stm ::= "if" "(" Exp ")" Stm ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
-- SWhile.  Stm ::= "while" "(" Exp ")" Stm ;
SReturn. Stm ::= "return" Exp  ";" ;

terminator Stm "" ;

EAss.    Exp  ::= Ident "=" Exp ;
EArrAss. Exp  ::= Ident "[" Exp "]" "=" Exp ;
EOr.     Exp1 ::= Exp1 "||" Exp2 ;
EAnd.    Exp2 ::= Exp2 "&&" Exp3 ;
EEq.     Exp3 ::= Exp3 "==" Exp4 ;
ENe.     Exp3 ::= Exp3 "!=" Exp4 ;
ELt.     Exp4 ::= Exp4 "<" Exp5 ;
ELe.     Exp4 ::= Exp4 "<=" Exp5 ;
EGt.     Exp4 ::= Exp4 ">" Exp5 ;
EGe.     Exp4 ::= Exp4 ">=" Exp5 ;
EAdd.    Exp5 ::= Exp5 "+" Exp6 ;
ESub.    Exp5 ::= Exp5 "-" Exp6 ;
EMul.    Exp6 ::= Exp6 "*" Exp7 ;
EDiv.    Exp6 ::= Exp6 "/" Exp7 ;
EMod.    Exp6 ::= Exp6 "%" Exp7 ;
ENeg.    Exp7 ::= "-" Exp8 ;
ENot.    Exp7 ::= "!" Exp8 ;
EArray.  Exp8 ::= Ident "[" Exp "]" ;
EWait.   Exp8 ::= "wait" "(" Exp ")" ;
ECall.   Exp8 ::= [Ident] "(" [CallArg] ")" ;
ESend.   Exp8 ::= Exp "." "send" "(" [CallArg] ")" ;
EVar.    Exp8 ::= Ident ;
EValue.  Exp8 ::= "msg" "." "value" ;
ESender. Exp8 ::= "msg" "." "sender" ;
EStr.    Exp8 ::= String ;
EInt.    Exp8 ::= Integer ;
ETrue.   Exp8 ::= "true" ;
EFalse.  Exp8 ::= "false" ;

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;

coercions Exp 8 ;
separator CallArg "," ;
separator nonempty Ident "." ;

AExp.   CallArg ::= Exp ;
ABra.   CallArg ::= "{" "from" ":" Exp "," "value" ":" Exp "}" ;

TUInt.   Type ::= "uint" "(" Integer ")" ;
TBool.   Type ::= "bool" ;
TRUInt.   Type ::= "random_uint" "(" Integer ")" ;
-- TRStr.   Type ::= "random_string" ;


