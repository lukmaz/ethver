comment "//" ;
comment "/*" "*/" ;

Prog.     Program  ::= [UserDecl] [ConstantDecl] Contract Communication [Scenario] ;

terminator UserDecl ";" ;
terminator ConstantDecl ";" ;
terminator Scenario "" ;

-- USERS

UDec.   UserDecl ::= "user" String ;

-- CONSTANTS

Const.  ConstantDecl ::= Ident "=" Integer ;

-- CONTRACT

Contr.    Contract ::= "contract" Ident "{" [Decl] Constructor [Function] "}" ;
Dec.      Decl     ::= Type Ident ;
DecInit.  Decl     ::= Type Ident "=" Exp ;
ArrDec.   Decl     ::= Type Ident "[" Integer "]" ;
MapDec.   Decl     ::= "mapping" "(" "address" "=>" Type ")" Ident ;

terminator Decl ";" ;
terminator Function "" ;

Constr.    Constructor ::= "constructor" "(" ")" "{" [Stm] "}" ;

-- COMMUNICATION

Comm.  Communication ::= "communication" "{" [Decl] [Function] "}" ;

-- SCENARIO

Scen.  Scenario ::= "scenario" Ident "{" [Decl] [Stm] "}" ;

Fun.      Function ::= "function" Ident "(" [Arg] ")" "public" "{" [Stm] "}" ;
FunV.     Function ::= "function" Ident "(" [Arg] ")" "public" "payable" "{" [Stm] "}" ;

Ar.   Arg  ::= Type Ident ;

separator  Arg "," ;

SBlock.  Stm ::= "{" [Stm] "}" ;
SAss.    Stm ::= Ident "=" Exp ";" ;
SArrAss. Stm ::= Ident "[" Exp "]" "=" Exp ";" ;
SIf.     Stm ::= "if" "(" Exp ")" Stm ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm ;
SSend.   Stm ::= Exp "." "transfer" "(" Exp ")" ";" ;
SSendT.  Stm ::= Exp "." "sendTransaction" "(" [CallArg] ")" ";" ;
SSendC.  Stm ::= Exp "." "sendCommunication" "(" [Exp] ")" ";" ;
SRCmt.   Stm ::= Exp "." "randomCmt" "(" ")" ";" ;
SRev.    Stm ::= Exp "." "revealCmt" "(" ")" ";" ;
SWait.   Stm ::= "wait" "(" Exp "," Exp ")" ";" ;

terminator Stm "" ;
separator Exp "," ;

EOr.     Exp ::= Exp "||" Exp1 ;
EAnd.    Exp1 ::= Exp1 "&&" Exp2 ;
EEq.     Exp2 ::= Exp2 "==" Exp3 ;
ENe.     Exp2 ::= Exp2 "!=" Exp3 ;
ELt.     Exp3 ::= Exp3 "<" Exp4 ;
ELe.     Exp3 ::= Exp3 "<=" Exp4 ;
EGt.     Exp3 ::= Exp3 ">" Exp4 ;
EGe.     Exp3 ::= Exp3 ">=" Exp4 ;
EAdd.    Exp4 ::= Exp4 "+" Exp5 ;
ESub.    Exp4 ::= Exp4 "-" Exp5 ;
EMul.    Exp5 ::= Exp5 "*" Exp6 ;
EDiv.    Exp5 ::= Exp5 "/" Exp6 ;
EMod.    Exp5 ::= Exp5 "%" Exp6 ;
ENeg.    Exp6 ::= "-" Exp6 ;
ENot.    Exp6 ::= "!" Exp6 ;
ERand.   Exp6 ::= "random" "(" Exp6 ")" ;
ESign.   Exp6 ::= "sign" "(" [Exp] ")" ;
EVerS.   Exp6 ::= "verSig" "(" Exp "," Exp "," "(" [Exp] ")" ")" ;
EVerC.   Exp6 ::= "verCmt" "(" Exp "," Exp ")" ;
EFinney. Exp6 ::= "finney" "(" Integer ")" ;
EArray.  Exp7 ::= Ident "[" Exp "]" ;
EValOf.  Exp7 ::= "valueOf" "(" Exp7 ")" ;
EHashOf. Exp7 ::= "hashOf" "(" Exp7 ")" ;
EValue.  Exp8 ::= "msg.value" ;
ESender. Exp8 ::= "msg.sender" ;
EVar.    Exp8 ::= Ident ;
EStr.    Exp8 ::= String ;
EInt.    Exp8 ::= Integer ;
ETrue.   Exp8 ::= "true" ;
EFalse.  Exp8 ::= "false" ;
EGetMy.  Exp8 ::= "this" ;

coercions Exp 8 ;
separator CallArg "," ;

AExp.   CallArg ::= Exp ;
ABra.   CallArg ::= "{" "value" ":" Exp "}" ;

TUInt.   Type ::= "uint" "(" Integer ")" ;
TCash.   Type ::= "cash" "(" Integer ")" ;
TBool.   Type ::= "bool" ;
TCUInt.  Type ::= "cmt_uint" "(" Integer ")" ;
TSig.    Type ::= "signature" "(" [Type] ")" ;
TAddr.   Type ::= "address" ;
TNonce.  Type ::= "nonce" ;
THash.   Type ::= "hash" ;

separator Type "," ;

